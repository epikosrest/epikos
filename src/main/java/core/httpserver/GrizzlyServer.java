package core.httpserver;

import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.grizzly.http.server.NetworkListener;
import org.glassfish.grizzly.http.server.StaticHttpHandler;
import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;
import org.glassfish.jersey.server.ResourceConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.URI;

/**
 * Created by nitina on 9/1/17.
 */
public class GrizzlyServer implements IHttpServer{

    final static Logger logger = LoggerFactory.getLogger(GrizzlyServer.class);

    @Override
    public void start(String serviceURI, ResourceConfig resource, String serviceName,int portNumber) {

        //String[] pack = {"controller", "com.wordnik.swagger.jersey.listing"};
        //resource.packages(pack);

        HttpServer grizzlyServer = GrizzlyHttpServerFactory.createHttpServer(
                URI.create(serviceURI), resource, false);
        NetworkListener listener = grizzlyServer.getListener("grizzly");
        grizzlyServer.addListener(listener);
        grizzlyServer.getServerConfiguration().setJmxEnabled(true);


        //Few ways to display static content
        //1. Following code won't work for .jar , need investigation
        //CLStaticHttpHandler staticHttpHandler = new CLStaticHttpHandler(Service.class.getClassLoader(), "swagger-ui/");
        //Bug: Grizzly currently has a bug as how it handles paths for static resources
        // It need trailing slash at the end to create static handler e.g. /docs/ as shown below
        //Also you can put "/" to map swagger-ui to root of url e.g. to map just http://localhost:8080
        //grizzlyServer.getServerConfiguration().addHttpHandler(staticHttpHandler, "/docs/");

        //2. Following technique won't work for .jar , although jar under target folder has been provided, need investigation
        /*
        grizzlyServer.getServerConfiguration().addHttpHandler(
                new CLStaticHttpHandler(new URLClassLoader(new URL[] {
                        new File("target/EpikosRestService-0.0.7.1-jar-with-dependencies.jar").toURI().toURL()}), "swagger-ui/"),
                "/docs");
                */

        //3. StaticHttpHandler is working while running using target/bin/Service script (which is being generated by plugin in pom)
        // but this still doesn't work when jar is executed directly (need investigation). Since it is working for script option
        // will keep this method for the time being.
        grizzlyServer.getServerConfiguration().addHttpHandler(
                new StaticHttpHandler("src/main/resources/swagger-ui/"), "/docs/");


        // register shutdown hook : This requirement came to support dockerization of service.
        // Without this hook the service will stop right away while running in docker container
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                logger.info("Stopping server..");
                grizzlyServer.stop();
            }
        }, "shutdownHook"));

        try {
            grizzlyServer.start();
            printServiceStatus(serviceName,serviceURI);
            logger.info("Press Ctrl+C to stop");
            Thread.currentThread().join();
            System.in.read();
        }catch (Exception exp){
            logger.error(String.format("Grizzly Server failed to start because of error %s",exp.getMessage()));
        }
    }

    @Override
    public void stop() {

    }

    private void printServiceStatus(String serviceName,String serviceURI){
        logger.info("\n\n*************************************************************************************************");
        logger.info(String.format("***** Jersey app started with WADL available at "
                + "%sapplication.wadl *****\n***** Hit enter to stop it... *****", serviceURI));
        String serverAddressLine = serviceName + " is up and running";
        logger.info("***** "+serverAddressLine +
                " *****\n***** " + serviceURI + " *****" +
                " *****\n***** " + serviceURI + "docs/" + " *****" + " for api documentation");
        logger.info("*************************************************************************************************\n\n");
    }


}
